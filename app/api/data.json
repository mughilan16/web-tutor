{
  "chapters": [
    {
      "id": 0,
      "title": "Comments",
      "description": "• Comments can be used to explain javascript code.\n• It will be ignored by the interpreter.\n• Comments are writtern with code for others and ourselves to understand it easily.",
      "examples": [
        {
          "title": "Single-Line Comments",
          "code": "// This is a single line comments\n// Declaring a variable x and assign 4 to it\nlet x = 4",
          "description": "• Single line comments can be written at the end of line of a code.\n• \"//\" will turn the text after it as comments."
        },
        {
          "title": "Multi-Line Comments",
          "code": "/*\nThis is function will take two value \nand add them together and \nprint the answer \n*/\nfunction(a, b) {\n    sum = a + b\n    console.log(sum)\n }",
          "description": "• Multi-line comments used to write documentation.\n• /* is the start of the comment and */ is the end of the comment."
        }
      ]
    },
    {
      "id": 1,
      "title": "Variables",
      "description": "Variables are containers for storing data.",
      "examples": [
        {
          "title": "Using var",
          "code": "var x = 10",
          "description": "The var keyword should only be used in code written for older browsers. var keyword allows us to redelare the same variable and it will let the variable access out of the scope."
        },
        {
          "title": "Using Let",
          "code": "let y = 5",
          "description": "Let keyword is modern replacement for var. It fixes the problems with var."
        },
        {
          "title": "Using Const",
          "code": "const pi = 3.14",
          "description": "Const keyword is used to define a constant value that should not be allowed to change."
        }
      ]
    },
    {
      "id": 2,
      "title": "Identifiers",
      "description": "JavaScript identifiers are names used to identify variables, functions, objects, or any other constructs within a JavaScript program.",
      "examples": [
        {
          "title": "Rules for Identifiers",
          "description": "1. Identifiers must begin with a letter (a-z, A-Z), an underscore (_), or a dollar sign ($).\n2. After the first character, identifiers can also contain digits (0-9).\n3. Identifiers are case-sensitive, meaning 'myVariable' and 'myvariable' are considered different.",
          "code": ""
        },
        {
          "title": "Valid Examples",
          "code": "let myVariable\nlet _privateVar\nlet $specialVar\nlet firstName\nlet calculateSum",
          "description": ""
        },
        {
          "title": "Invalid Examples",
          "code": "let 123var // starts with a digits\nlet my-variable // contains a hyphen\nlet my variable // contains a space",
          "description": ""
        },
        {
          "title": "Keywords",
          "description": "• We can't use javascript reversed words.\n• The reversed words are called keyword.\n• Example: `if`, `else`, `for`, `while`, and many more",
          "code": "let for // invalid \nlet function // invalid"
        }
      ]
    },
    {
      "id": 3,
      "title": "Naming Conventions",
      "description": "• Naming conventions are set of rules and guildelines used in programmming to define how identifiers should be named.\n• They are used to make the code more readable.\n• They are used to seperate words and use of specific prefixes or suffixes.",
      "examples": [
        {
          "title": "Camel Case",
          "description": "It's a common convention to use camel case for variable and function names in JavaScript. In camel case, the first word starts with a lowercase letter, and subsequent words are capitalized",
          "code": "const myAge = 18\nlet calculateTotalAmount = 10"
        },
        {
          "title": "Pascal Case",
          "description": "Pascal case is similar to camel case, but it starts with a capital letter. Commonly used for naming classes, constructors, or types.",
          "code": "class Person { }\nclass CarModel { }"
        },
        {
          "title": "Snake Case",
          "description": "• Snake case is used for naming files and used to naming variable is some language like rust, python.\n•In snake case, words are separated by underscores (_) and all letters are typically lowercase.",
          "code": "let max_value\nmy_module.js"
        },
        {
          "title": "Kebab Case",
          "description": "• Kebab case is similar to snake case, but words are separated by hyphens (-).\n• Often used in URLs and some web development contexts.",
          "code": "page-title, css-style-sheet"
        }
      ]
    },
    {
      "id": 4,
      "title": "Basic Datatypes",
      "description": "Javascript is a dynamically-typed language, which means that variables are not bound to a specific data type at the time of declaration. The data types are associated with the values stored in varaibles.",
      "examples": [
        {
          "title": "Numbers",
          "description": "Represents both integer and floating-point numbers.",
          "code": "let age = 30;\nconsole.log(age);"
        },
        {
          "title": "String",
          "description": "• String is a sequence of letter and numbers.\n• The value of the string is called string literal.\n• String Literal are surrounded by double quotes (\").\n• To print multiple values in console log, we use comma(,)",
          "code": "const myName = \"Mughilan\";\nconsole.log(\"Hello\", myName);"
        },
        {
          "title": "Boolean",
          "description": "Boolean value is either true or false",
          "code": "const isAuth = false;"
        },
        {
          "title": "Undefined and Null",
          "description": "• Undefined indicates that a variable declared but hasn't been assigned a value.\n• Null represents the intentional absence of any object value.",
          "code": "let city; // undefined\nlet emptyValue = null"
        }
      ]
    },
    {
      "id": 5,
      "title": "Operators",
      "description": "Operator are symbols or keywords that perform operations on one or more operantds to produce a result.",
      "examples": [
        {
          "title": "Arithmetic Operators",
          "description": "• + Addition\n• - Subtraction\n• * Multiplication\n• / Division\n• % Modulus(divide the numbers and return the remainder)",
          "code": "let a = 10, b = 3;\nconsole.log(a + b); // 13\nconsole.log(a - b); // 7\nconsole.log(a * b); // 30\nconsole.log(a / b); // 3.333\nconsole.log(a % b); // 1"
        },
        {
          "title": "Assignment Operators",
          "code": "let a = 10;\na += 4; // 14\na -= 3; // 11\na *= 6; // 66\na /= 11; // 6\na %= 3; // 0",
          "description": "Assignment operator perform the operations between the left side value and right side value and assign it to the left side.\n• = Assignment\n• += Addition assignment\n• -= Subtraction assignment\n• *= Multiplication assignment\n• /= Division assignment\n• %= Modulus assignment"
        },
        {
          "title": "Comparison Operators",
          "description": "• == Equality (loose equality, type coercion)\n• === Strict equality (no type coercion)\n• != Inequality (loose inequality, type coercion)\n• !== Strict inequality (no type coercion)\n• > Greater than\n• < Less than\n• >= Greater than or equal to\n• <= Less than or equal to",
          "code": "let x = 10, y = 6; \nlet z = \"10\"; \nconsole.log(x == z); // true \nconsole.log(x === z); // false \nconsole.log(x != z); // false \nconsole.log(x != y); // true \nconsole.log(x > y); // true \nconsole.log(x < y) // false \nconsole.log(x >= y) // true \nconsole.log(x <= y) // false"
        },
        {
          "title": "Logical Operators",
          "code": "let isTrue = true;\nlet isFalse = false;\nconsole.log(isTrue && isFalse);// false (logical AND)\nconsole.log(isTrue || isFalse); // true (logical OR)\nconsole.log(!isTrue); // false (logical NOT)",
          "description": "• && will return true only if both are true.\n• || will return true even if only one is true.\n• ! will invert the boolean value."
        },
        {
          "title": "Increment and decrement operators",
          "description": "• ++ will increase the value by 1\n• -- will decreae the value by 1",
          "code": "let count = 3;\ncount++ // 4\ncount-- // 3"
        },
        {
          "title": "Ternary Operator",
          "description": "It will take three operands(one condition and two value). If a condition if the condition is true then it will return the first value else it will return the second value.",
          "code": "let mark = 44;\nlet grade = mark > 40 ? \"pass\" : \"fail\"; // pass"
        },
        {
          "title": "TypeOf opeartor",
          "description": "Returns a type of the value in string",
          "code": "let x = 42;\nconsole.log(typeof x); // \"number\""
        }
      ]
    },
    {
      "id": 6,
      "title": "If statement",
      "description": "if statement is a control structure that allows you to execute a block of code conditionally based on a specified condition.",
      "examples": [
        {
          "title": "If",
          "code": "let grade = 46;\nif (grade > 40) {\n    console.log(\"pass\")\n}",
          "description": "Syntax:\nif (condition) {\n   //code\n}\nIf the condition is true then the code inside the curly braces { } executes.\nOtherwise the code will not get executed."
        },
        {
          "title": "If else",
          "code": "let grade = 36;\nif (grade > 40) {\n    console.log(\"pass\");\n} else {\n    console.log(\"fail\");\n}",
          "description": "If condition is false then the code block under else will execute."
        },
        {
          "title": "Else if",
          "code": "let grade = 80;\nif (grade < 80) {\n    console.log(\"A grade\")\n} else if (grade < 60) {\n    console.log(\"B grade\")\n} else if (grade > 40) {\n    console.log(\"C grade\")\n} else {\n    console.log(\"Fail\")\n}",
          "description": "Else if condition will execute if the previous condition is false, if all conditions are false, then the else block will be executed."
        }
      ]
    },
    {
      "id": 7,
      "title": "While Loop",
      "description": "While statement executes the code until the condition is false.\n\nwhile (condition) {\n   //code\n}\n",
      "examples": [
        {
          "title": "Example 1",
          "code": "let count = 0;\nwhile (count > 7) {\n    console.log(count);\n     count++\n}",
          "description": "First we set count to 0 then increment it every iteration and when the condition is false it will exit the loop.\nThis will print 0 to 6 because the loop will stop when count is not less than 7."
        },
        {
          "title": "Example 2",
          "code": "let count = 4\nwhile (count < 0) {\n    console.log(count);\n      count--\n}",
          "description": "Here we set count to a larger value and then decrement the value and check if it is greater than 0.\nThis will print 4 to 1."
        }
      ]
    },
    {
      "id": 8,
      "title": "For loop",
      "description": "It is compact version of while loop.\nfor(initialization; condition; iteration) {\n   // code \n}\n `initialization` is a expression that is executed once before the loop starts. It typically initializes a loop control variable.\n`condition` that stops loop when it is false.\n`iteration` is increment the variable.",
      "examples": [
        {
          "title": "Example 1",
          "code": "for (let count = 1; count <= 4; count++) {\n    console.log(count);\n}\n",
          "description": "Here we initialize the count to 1, after every iteration it will increment the value and check the condition.\nThis will print 1 to 4."
        },
        {
          "title": "Example 2",
          "code": "for (let count = 4; count >= 0; count++) {\n    console.log(count);\n}\n",
          "description": "Here we initialize the count to 4, after every iteration it will decrement the value and check the condition.\nThis will print 4 to 1."
        }
      ]
    },
    {
      "id": 9,
      "title": "For Each",
      "description": "This loop will iterate over a list of elements.\nIt use `for` keyword with `of` keyword.\nfor (const i in list) {\n    console.log(i)\n}",
      "examples": [
        {
          "title": "Example 1",
          "code": "const nums = [1, 2, 3, 4, 5];\nfor (const num of nums) {\n    console.log(num)\n}",
          "description": "We create array and printing all the number in the array."
        },
        {
          "title": "Example 2",
          "code": "const fruits = [\"Apple\", \"Banana\", \"Cherry\"];\nfor (const fruit of fruits) {\n     console.log(fruit);\n}",
          "description": "We create array of fruits and printing all the fruit."
        }
      ]
    }
  ]
}
